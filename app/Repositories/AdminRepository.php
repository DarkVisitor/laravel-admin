<?php
/**
 * Administrator repository.
 * User: YingQuan-han
 * Date: 2018/11/1
 * Time: 14:50
 */

namespace App\Repositories;


use App\Models\Admin;
use Illuminate\Support\Facades\DB;

class AdminRepository extends Repository
{
    public function model()
    {
        // TODO: Implement model() method.
        return Admin::class;
    }


    public function findBy($id)
    {
        return parent::findBy($id); // TODO: Change the autogenerated stub
    }


    /**
     * Finding administrator login data.
     *
     * @param $username
     * @return mixed
     */
    public function findByAdminLogin($username)
    {
        return $this->model
            ->with([
                'hasOnePassword'
            ])
            ->orWhere('name', trim($username))
            ->orWhere('email', trim($username))
            ->orWhere('mobile', trim($username))
            ->first();
    }


    /**
     * Get all administrator data
     *
     * @return mixed
     */
    public function allByAdmin()
    {
        return $this->model
            ->orderBy('created_at', 'asc')
            ->get()
            ->toArray();
    }


    /**
     * Paginate find administrators list data.
     *
     * @param int $limit
     * @param null $params
     * @return mixed
     */
    public function paginateFindByAdmin($limit = 10, $params = null)
    {
        return $this->model
            ->where(function ($query) use ($params){
                if (!is_null($params) && isset($params['keyword']) && $params['keyword']){
                    $query->orWhere('name', 'like', trim($params['keyword']).'%')
                        ->orWhere('mobile', 'like', trim($params['keyword']).'%')
                        ->orWhere('email', 'like', trim($params['keyword']).'%');
                }
            })
            ->where(function ($query) use ($params){
                if (!is_null($params) && isset($params['datetime']) && $params['datetime']){
                    $datetime = explode(',', $params['datetime']);
                    $query->where('created_at', '>=', daily_start_datetime($datetime[0]))
                        ->where('created_at', '<=', daily_end_datetime($datetime[1]));
                }
            })
            ->orderBy('created_at', 'asc')
            ->paginate($limit)
            ->toArray();
    }


    /**
     * Find members associated with roles.
     *
     * @param $roleId
     * @return mixed
     */
    public function findRoleByAdmin($roleId)
    {
        return $this->model
            ->whereHas('belongsToManyRole', function ($query) use ($roleId){
                $query->where('id', $roleId);
            })
            ->orderBy('created_at', 'asc')
            ->get()
            ->toArray();
    }


    /**
     * Delete account info.
     *
     * @param $id
     * @return mixed
     */
    public function delete($id)
    {
        return $this->model->where('id', $id)->delete();
    }
}